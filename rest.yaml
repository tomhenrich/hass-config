- resource: !secret charybdis_ohm
  scan_interval: 60
  sensor:
    - name: Charybdis CPU Load
      unique_id: charybdis_ohm_cpu_load
      availability: "{{ states('binary_sensor.charybdis_ping') == 'on' }}"
      unit_of_measurement: '%'
      value_template: >
        {% set ohm = value_json.Children[0].Children[0].Children %}
        {% for C1 in ohm %}
          {% if(C1.Text == "Load") %}
            {% for C2 in C1.Children %}
              {% if(C2.Text == "CPU Total") %}
                {{ C2.Value | regex_findall_index('\d+.?\d+') | float }}
              {% endif %}
            {% endfor  %}
          {% endif %}
        {% endfor  %}
    - name: Charybdis CPU Temperature
      unique_id: charybdis_ohm_cpu_temp
      availability: "{{ states('binary_sensor.charybdis_ping') == 'on' }}"
      device_class: temperature
      unit_of_measurement: 'Â°F'
      value_template: >
        {% set ohm = value_json.Children[0].Children[0].Children %}
        {% for C1 in ohm %}
          {% if(C1.Text == "Temperatures") %}
            {% for C2 in C1.Children %}
              {% if(C2.Text == "CPU Package") %}
                {{ C2.Value | regex_findall_index('\d+.?\d+') | float }}
              {% endif %}
            {% endfor  %}
          {% endif %}
        {% endfor  %}


# scan interval set to 4 weeks so sensor can be triggered via automation
# - resource: !secret arc_tags
#   scan_interval: 2419200
#   sensor:
#     - name: Arc Tags
#       unique_id: arc_tags
#       icon: mdi:tag
#       value_template: '{{ value_json.week }}'
#       json_attributes:
#         - saturday

- resource: !secret iqair_api
  scan_interval: 3600
  sensor:
    - name: IQAir AQI
      unique_id: iqair_aqi
      device_class: aqi
      value_template: '{{ value_json.data.current.pollution.aqius }}'
      json_attributes_path: $.data.current.pollution
      json_attributes:
        - ts



####################
#
#   PLEX/TAUTULLI
#
####################

- resource: !secret plex_sessions
  headers:
    Content-Type: 'application/json; charset=utf-8'
    Accept: 'application/json'
    X-Plex-Pms-Api-Version: '1.0'
    X-Plex-Token: !secret plex_token
  scan_interval: 604800
  sensor:
    - name: Plex Stream Data
      unique_id: plex_streams
      availability: "{{ states('binary_sensor.plex_ping') == 'on' }}"
      value_template: '{{ value_json.MediaContainer.size }}'
      json_attributes:
        - MediaContainer

- resource_template: http://{{ states('input_text.plex_ip')|string }}/library/sections/1/all
  headers:
    Content-Type: 'application/json; charset=utf-8'
    Accept: 'application/json'
    X-Plex-Pms-Api-Version: '1.0'
    X-Plex-Token: !secret plex_token
  params:
    excludeElements: 'Image,Genre,Role,Director,Writer,Country'
    includeFields: 'size,type,title,year,id,ratingKey,videoCodec,videoResolution,container,contentRating'
  scan_interval: 604800
  sensor:
    - name: Plex Movie Library
      unique_id: plex_library_movies
      availability: "{{ states('binary_sensor.plex_ping') == 'on' }}"
      value_template: '{{ value_json.MediaContainer.size }}'
      json_attributes:
        - MediaContainer
