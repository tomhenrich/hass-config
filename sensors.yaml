- platform: systemmonitor
  resources:
    - type: processor_temperature
    - type: memory_free
    - type: memory_use_percent
    - type: processor_use
    - type: disk_use_percent
      arg: "/"
    - type: last_boot
    - type: network_in
      arg: eth0
    - type: network_out
      arg: eth0

- platform: time_date
  display_options:
    - 'time'
    - 'date'

# scan every 6 hours
- platform: rest
  resource: !secret my_trashpickup_url
  name: "Trash Service"
  scan_interval: 21600
  json_attributes:
    - date
    - desc
    - type
    - prox
    - when
  value_template: "{{ value_json.desc }}"

# scan every 1 hour
- platform: rest
  resource: !secret my_datausage_url
  name: "Monthly Data Usage"
  scan_interval: 3600
  json_attributes:
    - used
    - per
    - progress
    - upd
  value_template: "{{ value_json.used }}"
  unit_of_measurement: "GB"

# scan every 1 hour
- platform: rest
  resource: !secret my_airvisual_url
  name: airvisual_data
  scan_interval: 3600 # one hour
  json_attributes_path: "$.data.current.pollution"
  json_attributes:
    - ts
    - aqius
    - mainus
  value_template: '{{ value_json.data.current.pollution.aqius }}'

# scan every 1/2 hour
- platform: rest
  resource: !secret my_weather_url
  name: weather_report
  scan_interval: 1800
  json_attributes:
    - current_condition
    - current_temp
    - current_feel
  value_template: '{{ value_json.updated }}'

# scan every 2 hours
- platform: rest
  resource: !secret tautulli_api_libs
  name: "Plex Libraries"
  scan_interval: 7200
  json_attributes_path: "$.response"
  json_attributes:
    - data
  value_template: '{{ value_json.response.result }}'

- platform: template
  sensors:

    airvisual:
      friendly_name: Air Quality
      value_template: >
        {% set aqi = states('sensor.airvisual_data')|int %}
        {% if aqi > 300 %} Hazardous
        {% elif aqi > 200 %} Very Unhealthy
        {% elif aqi > 100 %} Unhealthy
        {% elif aqi > 50 %} Moderate
        {% else %} Good
        {% endif %}
      icon_template: >
        {% set aqi = states('sensor.airvisual') %}
        {% if aqi == "Good" %}
          mdi:emoticon
        {% elif aqi == "Moderate" %}
          mdi:emoticon-neutral-outline
        {% elif aqi == "Unhealthy" %}
          mdi:emoticon-frown-outline
        {% elif aqi == "Very Unhealthy" %}
          mdi:emoticon-frown
        {% elif aqi == "Hazardous" %}
          mdi:emoticon-dead
        {% else %}
          mdi:help-circle-outline
        {% endif %}
      attribute_templates:
        contaminant: >
          {{ state_attr('sensor.airvisual_data','mainus') }}

    outside_temp:
      friendly_name: "Outside Temperature"
      value_template: >
        {{ state_attr('sensor.weather_report','current_temp')|int }}
      unit_of_measurement: "°F"

#    inside_temp:
#        friendly_name: "Inside Temperature"
#        value_template: >
#          {{ states('sensor.ecobee3_temperature')|int }}
#        unit_of_measurement: "°F"

    monthly_data_cap:
      friendly_name: Data Cap Usage
      value_template: >
        {{ state_attr('sensor.monthly_data_usage','per')|float }}
      unit_of_measurement: "%"
      attribute_templates:
        updated: >
          {{ state_attr('sensor.monthly_data_usage','upd') }}
        progress: >
          {{ state_attr('sensor.monthly_data_usage','progress')|float }}
      icon_template: >
        {% set pct = state_attr('sensor.monthly_data_usage','per')|float %}
        {% if pct < 12.5 %}
          mdi:circle-outline
        {% elif (pct >= 12.5 and pct < 25) %}
          mdi:circle-slice-1
        {% elif (pct >= 25 and pct < 37.5) %}
          mdi:circle-slice-2
        {% elif (pct >= 37.5 and pct < 50) %}
          mdi:circle-slice-3
        {% elif (pct >= 50 and pct < 62.5) %}
          mdi:circle-slice-4
        {% elif (pct >= 62.5 and pct < 75) %}
          mdi:circle-slice-5
        {% elif (pct >= 75 and pct < 87.5) %}
          mdi:circle-slice-6
        {% elif (pct >= 87.5 and pct < 100) %}
          mdi:circle-slice-7
        {% else %}
          mdi:circle-slice-8
        {% endif %}


    plex_movies:
      friendly_name: "Plex: Movies"
      icon_template: 'mdi:movie'
      value_template: >
          {% for lib in state_attr('sensor.plex_libraries', 'data') -%}
          {% if lib.section_id == '1' %}
              {{ lib.count }}
          {% endif %}
          {% endfor %}
    plex_movies4k:
      friendly_name: "Plex: 4K Movies"
      icon_template: 'mdi:movie'
      value_template: >
          {% for lib in state_attr('sensor.plex_libraries', 'data') -%}
          {% if lib.section_id == '2' %}
              {{ lib.count|int }}
          {% endif %}
          {% endfor %}
    plex_shows:
      friendly_name: "Plex: TV Shows"
      icon_template: 'mdi:television-classic'
      value_template: >
          {% for lib in state_attr('sensor.plex_libraries', 'data') -%}
          {% if lib.section_id == '3' %}
              {{ lib.count|int }}
          {% endif %}
          {% endfor %}
      attribute_templates:
        seasons: >
          {% for lib in state_attr('sensor.plex_libraries', 'data') -%}
          {% if lib.section_id == '3' %}
              {{ lib.parent_count|int }}
          {% endif %}
          {% endfor %}
        episodes: >
          {% for lib in state_attr('sensor.plex_libraries', 'data') -%}
          {% if lib.section_id == '3' %}
              {{ lib.child_count|int }}
          {% endif %}
          {% endfor %}


    month_gone:
      friendly_name: Percentage of the Month
      value_template: >
        {% if now().month in [1,3,5,7,8,10,12] %}
        {% set days = 31 %}
        {% elif now().month in [4,6,9,11] %}
        {% set days = 30 %}
        {% elif now().month == 2 and ((now().year-2000) % 4 > 0) %}
        {% set days = 28 %}
        {% elif now().month == 2 and ((now().year-2000) % 4 == 0) %}
        {% set days = 29 %}
        {% endif %}
        {% set d = now().day | int %}
        {% set p = (d / days)|float|round(2) * 100 %}
        {{ p }}
      unit_of_measurement: "%"
        
    ds420j_last_boot_fmt:
      friendly_name: DS420j Last Boot
      value_template: "{{ as_timestamp(states('sensor.ds420j_last_boot')) | timestamp_custom('%b %-d, %H:%M') }}"
      icon_template: 'mdi:calendar-clock'

