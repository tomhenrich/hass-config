- id: '1609516804056'
  alias: Good Night
  description: ''
  trigger:
  - platform: event
    event_type: zwave_js_value_notification
    event_data:
      node_id: 14
      label: Scene 001
      value: KeyPressed2x
  condition: []
  action:
  - scene: scene.good_night
  mode: single
- id: '1625264068184'
  alias: Plex Button
  description: ''
  trigger:
  - device_id: c41a7cabdaf68d062d0fa206dfe908cb
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: turn_on
    id: singlepress
  - platform: event
    event_type: ios.action_fired
    id: ios
    event_data:
      actionName: Plex Open
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - singlepress
        - ios
      sequence:
      - service: script.plex_on_den_tv
        data: {}
  mode: restart
- id: '1632860503837'
  alias: 'Living Room: Light - Dimmer Button'
  description: ''
  use_blueprint:
    path: shannon/ikea_tradfri_2button_dimmer.yaml
    input:
      button_device: 72b251a428277f7ce1b4de58b20344b5
      light_target:
        entity_id:
        - light.livingroom_light
      light_step: 20
      light_delay_ms: 250
- id: '1632860568197'
  alias: 'Den: Lights - Dimmer Button'
  description: ''
  use_blueprint:
    path: shannon/ikea_tradfri_2button_dimmer.yaml
    input:
      button_device: 84350b6f41b7cad45266de52c9f7b34b
      light_target:
        entity_id:
        - light.den_light_2
      light_step: 20
      light_delay_ms: 250
- id: '1635292786302'
  alias: 'Living Room: Nightlight'
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.hallway_motion
    from: 'off'
    to: 'on'
    id: motion_sensed
    trigger: state
    alias: Hallway motion sensors trigger
  - entity_id:
    - binary_sensor.hallway_motion
    id: motion_cleared
    to: 'off'
    for:
      hours: 0
      minutes: 2
      seconds: 0
    from: 'on'
    trigger: state
    alias: Hallway motion clears
  - entity_id: light.livingroom_light
    id: turned_off
    from: 'on'
    to: 'off'
    trigger: state
    alias: Living room light manually turned off
  - trigger: state
    entity_id:
    - light.livingroom_light
    attribute: brightness
    id: brightness_changed
    alias: Living room light manually changed
  conditions:
  - condition: or
    conditions:
    - alias: Away but have guests
      condition: and
      conditions:
      - condition: state
        entity_id: input_boolean.vacation_mode
        state: 'on'
      - condition: state
        entity_id: input_boolean.guest_mode
        state: 'on'
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'off'
      alias: Home
  actions:
  - alias: 'Choose:'
    choose:
    - conditions:
      - condition: trigger
        id:
        - motion_sensed
      - condition: device
        type: is_off
        device_id: 2b32fb5d67808eb1d15a5dabb1ac493b
        entity_id: light.livingroom_light
        domain: light
        for:
          hours: 0
          minutes: 0
          seconds: 0
        alias: Living Room Light is currently off
      - condition: state
        entity_id: input_boolean.livingroom_nightlight
        state: 'on'
        alias: Within scheduled window
      sequence:
      - type: turn_on
        device_id: 2b32fb5d67808eb1d15a5dabb1ac493b
        entity_id: light.livingroom_light
        domain: light
        brightness_pct: 25
      - target:
          entity_id: input_boolean.livingroom_nightlight_status
        data: {}
        action: input_boolean.turn_on
        alias: Turn on the status indicator helper
      alias: Motion after dark turns on light
    - conditions:
      - alias: When motion clears
        condition: trigger
        id:
        - motion_cleared
      - condition: state
        state: 'on'
        entity_id: input_boolean.livingroom_nightlight_status
        alias: Confirm night light condition is active
      sequence:
      - type: turn_off
        device_id: 2b32fb5d67808eb1d15a5dabb1ac493b
        entity_id: light.livingroom_light
        domain: light
      - target:
          entity_id: input_boolean.livingroom_nightlight_status
        data: {}
        action: input_boolean.turn_off
        alias: Turn off the status indicator helper
      alias: Lack of motion while night light is on turns it off
    - conditions:
      - condition: trigger
        id:
        - brightness
        - lightsout
      sequence:
      - action: input_boolean.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.livingroom_nightlight_status
        alias: Turn off status helper so it doesn't automatically change again
      alias: Disable Night Light status after manual change
    default: []
  mode: parallel
  max: 10
- id: '1635383409645'
  alias: 'Master Bathroom: Light Buttons'
  description: ''
  triggers:
  - event_type: zwave_js_value_notification
    id: low
    event_data:
      node_id: 15
      label: Scene 003
      value: KeyPressed
    trigger: event
    alias: Low Button
  - event_type: zwave_js_value_notification
    id: medium
    event_data:
      node_id: 15
      label: Scene 002
      value: KeyPressed2x
    trigger: event
    alias: Double Tap Up
  - event_type: zwave_js_value_notification
    id: high
    event_data:
      node_id: 15
      label: Scene 002
      value: KeyPressed3x
    trigger: event
    alias: Triple Tap Up
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id: low
      sequence:
      - type: turn_on
        device_id: 8b8fa19a5dddafb0fa74d2af37668516
        entity_id: light.master_bath_light
        domain: light
        brightness_pct: 25
    - conditions:
      - condition: trigger
        id: medium
      sequence:
      - type: turn_on
        device_id: 8b8fa19a5dddafb0fa74d2af37668516
        entity_id: light.master_bath_light
        domain: light
        brightness_pct: 50
    - conditions:
      - condition: trigger
        id: high
      sequence:
      - type: turn_on
        device_id: 8b8fa19a5dddafb0fa74d2af37668516
        entity_id: light.master_bath_light
        domain: light
        brightness_pct: 100
    default: []
  mode: single
- id: '1635473249505'
  alias: Doorbell Pressed
  description: ''
  triggers:
  - device_id: 6cdda8e754024fedf106703f18c3f64b
    domain: zha
    type: remote_button_short_press
    subtype: button_1
    trigger: device
    alias: Doorbell Rung
  conditions: []
  actions:
  - data:
      title: Doorbell pressed!
      message: Doorbell has been rung.
    action: notify.telegram_tom
  - action: button.press
    metadata: {}
    data: {}
    target:
      entity_id: button.doorbell
    enabled: true
  mode: single
- id: '1635605604406'
  alias: 'Notify: Leak Detected'
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.kitchen_sink_leak_sensor
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 5
    trigger: state
  conditions: []
  actions:
  - data:
      message: Kitchen Sink Leak Detected!
    action: notify.telegram_tom
  mode: single
- id: '1641600921734'
  alias: 'Living Room: Light Switches'
  description: ''
  trigger:
  - platform: event
    event_type: zwave_js_value_notification
    id: dining_up2
    event_data:
      node_id: 18
      label: Scene 002
      value: KeyPressed2x
    alias: 'Dining Room Switch: Up 2x'
  - platform: event
    event_type: zwave_js_value_notification
    id: dining_down2
    event_data:
      node_id: 18
      label: Scene 001
      value: KeyPressed2x
    alias: 'Dining Room Switch: Down 2x'
  - platform: event
    event_type: zwave_js_value_notification
    id: dining_up3
    event_data:
      node_id: 18
      label: Scene 002
      value: KeyPressed3x
    alias: 'Dining Room Switch: Up 3x'
  - platform: event
    event_type: zwave_js_value_notification
    id: dining_down3
    event_data:
      node_id: 18
      label: Scene 001
      value: KeyPressed3x
    alias: 'Dining Room Switch: Down 3x'
  - platform: event
    event_type: zwave_js_value_notification
    event_data:
      node_id: 12
      label: Scene 002
      value: 3
    id: entry_up2
    alias: 'Entryway Switch: Up 2x'
  - platform: event
    event_type: zwave_js_value_notification
    event_data:
      node_id: 12
      label: Scene 001
      value: 3
    id: entry_down2
    alias: 'Entryway Switch: Down 2x'
  condition: []
  action:
  - choose:
    - conditions:
      - condition: or
        conditions:
        - condition: trigger
          id: dining_up2
        - condition: trigger
          id: entry_up2
      sequence:
      - type: turn_on
        device_id: 2b32fb5d67808eb1d15a5dabb1ac493b
        entity_id: light.livingroom_light
        domain: light
        brightness_pct: 75
    default: []
  - choose:
    - conditions:
      - condition: or
        conditions:
        - condition: trigger
          id: dining_down2
        - condition: trigger
          id: entry_down2
      sequence:
      - type: turn_off
        device_id: 2b32fb5d67808eb1d15a5dabb1ac493b
        entity_id: light.livingroom_light
        domain: light
    - conditions:
      - condition: or
        conditions:
        - condition: trigger
          id: dining_up3
      sequence:
      - device_id: 2b32fb5d67808eb1d15a5dabb1ac493b
        domain: number
        entity_id: number.livingroom_light_on_level
        type: set_value
        value: 100
    default: []
  mode: single
- id: '1645381546254'
  alias: iOS Actions
  description: ''
  triggers:
  - event_type: ios.action_fired
    id: ios_masterbath
    event_data:
      actionName: Bathroom Light
    trigger: event
    alias: Main Bathroom
  - event_type: ios.action_fired
    id: ios_mutetautulli
    event_data:
      actionName: Pause Tautulli
    context:
      user_id:
      - 1adcbfbd5637444bacb8239bc794bb4a
    trigger: event
    alias: Mute Plex Notifications
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - ios_masterbath
      sequence:
      - type: toggle
        device_id: 8b8fa19a5dddafb0fa74d2af37668516
        entity_id: 0d28026431de136ba9b7f1a34aa54a48
        domain: light
    alias: Master Bath Toggle
  - alias: Mute Plex Notifications
    choose:
    - conditions:
      - condition: trigger
        id:
        - ios_mutetautulli
      sequence:
      - action: input_boolean.turn_off
        metadata: {}
        data: {}
        target:
          entity_id:
          - input_boolean.plex_notifications
  mode: single
- id: '1663689219205'
  alias: 'Plex: Kometa Notifications'
  description: Notifications based on the receipt of a webhook from Kometa (formerly
    Plex Meta Manager) when it has completed processing a library.
  triggers:
  - alias: 'Webhook: Kometa Run Completed'
    webhook_id: kometa-complete
    id: kometa-complete
    allowed_methods:
    - POST
    - PUT
    local_only: true
    trigger: webhook
  - alias: 'Webhook: Kometa Error'
    webhook_id: kometa-error
    id: kometa-error
    allowed_methods:
    - POST
    - PUT
    local_only: true
    trigger: webhook
  - alias: 'Webhook: Kometa Change Notification'
    webhook_id: kometa-changes
    id: kometa-changes
    allowed_methods:
    - POST
    - PUT
    local_only: true
    trigger: webhook
  conditions: []
  actions:
  - variables:
      event: '{{ trigger.json.event }}'
  - choose:
    - conditions:
      - condition: trigger
        id:
        - kometa-error
      sequence:
      - data_template:
          title: "#Kometa {{ 'Critical ' if trigger.json.critical|bool == true }}Error"
          message: '{{ trigger.json.error }}'
        action: notify.telegram_tom
        alias: Send Telegram notification
      alias: Triggered on Kometa error
    - conditions:
      - condition: trigger
        id:
        - kometa-complete
      - alias: Collections were created, deleted, or modified
        condition: template
        value_template: '{{ (trigger.json.collections_created|int + trigger.json.collections_modified|int
          + trigger.json.collections_deleted|int) > 0 }}'
      sequence:
      - data_template:
          title: '#Kometa run completed'
          message: '* {{ trigger.json.collections_created }} collections created *
            {{ trigger.json.collections_modified }} collections modified * {{ trigger.json.collections_deleted
            }} collections deleted'
        action: notify.telegram_tom
        alias: Send Telegram notification
      alias: Triggered on Kometa completion
    - conditions:
      - condition: trigger
        id:
        - kometa-changes
      sequence:
      - variables:
          created: '{{ trigger.json.created }}'
          collection: '{{ trigger.json.collection }}'
          additions: '{{ trigger.json.additions }}'
          removals: '{{ trigger.json.removals }}'
      - data_template:
          title: "#Kometa {{ iif(trigger.json.created|bool == true, 'created', 'updated')
            }} _{{ trigger.json.collection }}_ collection"
          message: "{% if( trigger.json.additions|length > 0 ) %} *-Additions:* {{
            trigger.json.additions|length }} {% for a in trigger.json.additions %}\n
            \ - {{ a.title }}{% endfor %}\n{% endif %} {% if( trigger.json.removals|length
            > 0 ) %} *-Removals:* {{trigger.json.removals|length}} {% for r in trigger.json.removals
            %}\n  - {{ r.title }}{% endfor %}\n{% endif %}"
        action: notify.telegram_tom
        alias: Send Telegram notification
      alias: Triggered by Kometa changes
  trace:
    stored_traces: 10
  mode: parallel
  max: 15
- id: '1669779259047'
  alias: Wallpanel Charging
  description: ''
  triggers:
  - trigger: numeric_state
    entity_id:
    - sensor.my_wall_panel_battery_level
    below: 25
    id: battery_low
  - trigger: numeric_state
    entity_id:
    - sensor.my_wall_panel_battery_level
    for:
      hours: 4
      minutes: 0
      seconds: 0
    id: battery_charged
    above: 90
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - low_battery
        - battery_low
        alias: Low Battery
      sequence:
      - data: {}
        target:
          entity_id: switch.den_tablet_outlet_switch_2
        action: switch.turn_on
    - conditions:
      - condition: trigger
        id:
        - battery_charged
      sequence:
      - data: {}
        target:
          entity_id:
          - switch.den_tablet_outlet_switch_2
        action: switch.turn_off
  mode: single
- id: '1706207124195'
  alias: Charybdis Notification
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.charybdis_cpu_busy
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 5
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - alias: Send Telegram notification
    data:
      message: 'Charybdis #CPU has returned to low usage'
    action: notify.telegram_tom
  mode: single
- id: '1716003316170'
  alias: Set Default Theme
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  condition: []
  action:
  - service: frontend.set_theme
    data:
      mode: dark
      name: Fluent Orange
  mode: single
- id: '1737656825568'
  alias: 'Plex: Uptime Notifications'
  description: ''
  triggers:
  - alias: Ping goes offline for 2+ minutes
    trigger: state
    entity_id:
    - binary_sensor.plex_ping
    from: 'on'
    for:
      hours: 0
      minutes: 4
      seconds: 0
    id: plex-down
    to: 'off'
  - trigger: state
    entity_id:
    - binary_sensor.plex_ping
    for:
      hours: 0
      minutes: 0
      seconds: 0
    id: plex-start
    to: 'on'
    from: 'off'
    alias: Ping comes online from being offline (not just unavailable)
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - plex-down
      sequence:
      - action: notify.telegram_tom
        metadata: {}
        data:
          message: Plex no longer running
    - conditions:
      - condition: trigger
        id:
        - plex-start
      sequence:
      - action: notify.telegram_tom
        metadata: {}
        data:
          message: Plex has started
  mode: single
- id: '1741716414639'
  alias: Credenza Light Toggle
  description: ''
  triggers:
  - device_id: c41a7cabdaf68d062d0fa206dfe908cb
    domain: zha
    type: remote_button_short_press
    subtype: turn_on
    trigger: device
    id: credenza-button
    alias: Credenza button pressed
  conditions: []
  actions:
  - action: homeassistant.toggle
    metadata: {}
    data: {}
    target:
      entity_id: light.credenza_lights
    alias: Toggle Credenza Light Group
  mode: parallel
  max: 10
- id: '1742484754804'
  alias: Dogs Heartworm Meds
  description: ''
  triggers:
  - trigger: time
    at: 00:01:00
  conditions:
  - condition: template
    value_template: '{{ now().day == 15 }}'
    alias: on the 15th
  actions:
  - action: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.dogs_heartworm_meds
  mode: single
- id: '1748092050802'
  alias: Vacation Alerts
  description: Send notification if a door, window, or the garage opens while in Vacation
    Mode, unless there are guests present.
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.exterior_openings
    from: 'off'
    to: 'on'
  - trigger: state
    entity_id:
    - binary_sensor.garage_door_sensor
    from: 'off'
    to: 'on'
  conditions:
  - condition: state
    entity_id: input_boolean.vacation_mode
    state: 'on'
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  actions:
  - action: notify.telegram_tom
    metadata: {}
    data:
      message: Unexpected Activity While Away
      title: Vacation Alert
  mode: single
- id: '1752362032159'
  alias: Guest Room Light Switch
  description: ''
  triggers:
  - alias: Tap down
    device_id: fb4b4041843a998d1cbe71f55648fb2f
    domain: zwave_js
    type: event.value_notification.central_scene
    property: scene
    property_key: '001'
    endpoint: 0
    command_class: 91
    subtype: Endpoint 0 Scene 001
    metadata: {}
    trigger: device
    id: singletap_down
    value: 0
  - alias: Tap up
    device_id: fb4b4041843a998d1cbe71f55648fb2f
    domain: zwave_js
    type: event.value_notification.central_scene
    property: scene
    property_key: '002'
    endpoint: 0
    command_class: 91
    subtype: Endpoint 0 Scene 002
    trigger: device
    id: singletap_up
    value: 0
  - device_id: fb4b4041843a998d1cbe71f55648fb2f
    domain: zwave_js
    type: event.value_notification.central_scene
    property: scene
    property_key: '001'
    endpoint: 0
    command_class: 91
    subtype: Endpoint 0 Scene 001
    trigger: device
    value: 3
    id: doubletap_down
    alias: Double tap down
  - alias: Double tap up
    device_id: fb4b4041843a998d1cbe71f55648fb2f
    domain: zwave_js
    type: event.value_notification.central_scene
    property: scene
    property_key: '002'
    endpoint: 0
    command_class: 91
    subtype: Endpoint 0 Scene 002
    trigger: device
    id: doubletap_up
    value: 3
  - device_id: fb4b4041843a998d1cbe71f55648fb2f
    domain: zwave_js
    type: event.value_notification.central_scene
    property: scene
    property_key: '001'
    endpoint: 0
    command_class: 91
    subtype: Endpoint 0 Scene 001
    trigger: device
    value: 2
    alias: Hold down
    id: hold_down
  - alias: Hold up
    device_id: fb4b4041843a998d1cbe71f55648fb2f
    domain: zwave_js
    type: event.value_notification.central_scene
    property: scene
    property_key: '002'
    endpoint: 0
    command_class: 91
    subtype: Endpoint 0 Scene 002
    trigger: device
    id: hold_up
    value: 2
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - singletap_down
        - singletap_up
      sequence:
      - action: light.toggle
        metadata: {}
        data: {}
        target:
          entity_id: light.guest_ceiling
      alias: Toggle Light
    - conditions:
      - condition: trigger
        id:
        - doubletap_down
        - doubletap_up
      sequence:
      - action: fan.toggle
        metadata: {}
        data: {}
        target:
          entity_id: fan.guest_ceiling
      alias: Toggle Fan
    - conditions:
      - condition: trigger
        id:
        - hold_down
      sequence:
      - action: fan.decrease_speed
        metadata: {}
        data: {}
        target:
          entity_id: fan.guest_ceiling
      alias: Decrease Fan Speed
    - conditions:
      - condition: trigger
        id:
        - hold_up
      sequence:
      - action: fan.increase_speed
        metadata: {}
        data: {}
        target:
          entity_id: fan.guest_ceiling
      alias: Increase Fan Speed
  mode: single
- id: '1752518252284'
  alias: 'Plex: Telegram Responses'
  description: ''
  triggers:
  - alias: /mute command received
    trigger: event
    event_type: telegram_command
    event_data:
      command: /muteplex
    context: {}
    id: muteplex
  - alias: /resume command received
    trigger: event
    event_type: telegram_command
    event_data:
      command: /resumeplex
    context: {}
    id: resumeplex
  - alias: /muteme command received
    trigger: event
    event_type: telegram_command
    event_data:
      command: /muteme
    context: {}
    id: muteme
  - alias: Ombi Approval
    trigger: event
    event_type: telegram_command
    event_data:
      command: /ombiapprove
    context: {}
    id: ombiapprove
    enabled: false
  conditions:
  - alias: If approved user
    condition: template
    value_template: "{{ trigger.event.data.user_id|string == states('sensor.telegram_tom_s_chat_id')|string }}"
    enabled: true
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - muteplex
      sequence:
      - action: input_boolean.turn_off
        metadata: {}
        data: {}
        target:
          entity_id:
          - input_boolean.plex_notifications
      - action: notify.telegram_tom
        metadata: {}
        data:
          message: Muting Tautulli notifications, reply /resumeplex when ready
    - conditions:
      - condition: trigger
        id:
        - resumeplex
      sequence:
      - action: input_boolean.turn_on
        metadata: {}
        data: {}
        target:
          entity_id:
          - input_boolean.plex_notifications_for_me
          - input_boolean.plex_notifications
      - action: notify.telegram_tom
        metadata: {}
        data:
          message: Notifications active
    - conditions:
      - condition: trigger
        id:
        - muteme
      sequence:
      - action: input_boolean.turn_off
        metadata: {}
        data: {}
        target:
          entity_id:
          - input_boolean.plex_notifications_for_me
      - action: notify.telegram_tom
        metadata: {}
        data:
          message: tomhenrich Plex activity muted
    - conditions:
      - condition: trigger
        id:
        - ombiapprove
      sequence:
      - variables:
          payload: '{{ trigger.event.data }}'
  mode: parallel
  max: 10
- id: '1754969023074'
  alias: Torrent Monitoring
  description: Periodically refresh torrent data (if client is running), and watch
    for webhooks to notify on newly completed torrents.
  triggers:
  - trigger: webhook
    allowed_methods:
    - POST
    - PUT
    local_only: true
    webhook_id: torrentcomplete
    id: webhook-received
  conditions: []
  actions:
  - variables:
      payload: '{{ trigger.json }}'
  - data_template:
      title: "\U0001F4C8 **#Torrent Completed:**"
      message: '{% set data = trigger.json %} {{ data.torrent_name }}

        '
    action: notify.telegram_tom
    alias: Send Telegram notification
  - action: homeassistant.update_entity
    metadata: {}
    data:
      entity_id:
      - sensor.completed_torrents
    alias: Refresh count of completed torrents
  mode: parallel
  max: 10
- id: '1756386532634'
  alias: Wake on LAN from Telegram
  description: ''
  triggers:
  - alias: /wake command received
    trigger: event
    event_type: telegram_command
    event_data:
      command: /wake
    context: {}
    id: wake
  conditions:
  - alias: Charybdis Ping is Offline
    condition: template
    value_template: '{{states("binary_sensor.charybdis_ping")|bool == false }}'
    enabled: true
  actions:
  - action: button.press
    metadata: {}
    data: {}
    target:
      entity_id: button.wake_on_lan_e8_d8_d1_4d_cf_4e
  mode: single
- id: '1757439729866'
  alias: Low battery notification
  description: ''
  use_blueprint:
    path: sbyx/low-battery-level-detection-notification-for-all-battery-sensors.yaml
    input:
      threshold: 25
      exclude:
        entity_id:
        - sensor.den_light_dimmer_battery
        - binary_sensor.fibaro_motion_2_low_battery_level
        - binary_sensor.garage_door_sensor_low_battery
        - sensor.my_wall_panel_battery_level
        - sensor.ups_battery_charge_2
      actions:
      - action: notify.telegram_tom
        metadata: {}
        data:
          message: 'Battery below threshold for: {{sensors}}'
          title: Low Battery Warning
- id: '1757450549208'
  alias: Plex Stream Notifications
  description: ''
  triggers:
  - alias: Tautulli Streaming Webhook
    allowed_methods:
    - POST
    - PUT
    local_only: false
    webhook_id: tautulli-stream
    enabled: true
    trigger: webhook
  actions:
  - alias: Fetch Tautulli Stream Data
    action: homeassistant.update_entity
    metadata: {}
    data:
      entity_id:
      - sensor.tautulli_stream_data
    enabled: true
  - variables:
      payload: "{{ trigger.json }}"
      key: "{{ payload.session_key|int }}"
      event: "{{ payload.action }}"
      user: "{{ payload.user }}"
      me: "{{ user == 'tomhenrich' }}"
      title: "{{ payload.title }}"
      year: "{{ payload.year }}"
      session: "{% if( event != 'stop' ) %}\n  {% for s in state_attr('sensor.tautulli_stream_data',
        'sessions') %}\n    {{ s if s.session_key|int == key }}\n  {% endfor %}\n{%
        else %}\n  0\n{% endif %}\n"
      d_con: '{{ session.stream_container_decision if session != 0 else None }}'
      d_vid: '{{ session.stream_video_decision if session != 0 else None }}'
      d_aud: '{{ session.stream_audio_decision if session != 0 else None }}'
      d_sub: '{{ session.stream_subtitle_decision if session != 0 else None }}'
    alias: Define Variables
  - if:
    - condition: or
      conditions:
      - alias: My activity, and notifications are enabled
        condition: template
        value_template: "{{\n  me == true and\n  states('input_boolean.plex_notifications')|bool
          and\n  states('input_boolean.plex_notifications_for_me')|bool == true\n}}"
      - alias: User activity, and notifications are enabled
        condition: template
        value_template: "{{\n  me == false and\n  states('input_boolean.plex_notifications')|bool
          == true\n}}"
      enabled: true
    - alias: Only continue for certain events
      condition: template
      value_template: "{{ event in ['play','change'] }}"
    then:
    - alias: Send Telegram Notification
      action: notify.telegram_tom
      metadata: {}
      data:
        message: "_{{ title }}_ ({{ year }})

          {% if( event != 'stop' and session != '0' ) %}

          {% if( session.transcode_decision != 'direct play') %}

          Transcoded stream:

          -Container: {{ d_con }}{% if( d_vid != 'direct play') %}

          -Video: {{ 'stream' if d_vid == 'copy' else d_vid }}{% endif %}{% if(
          d_aud != 'direct play') %}

          -Audio: {{ 'stream' if d_aud == 'copy' else d_aud }}{% endif %}{% if(
          d_sub not in ['','ignore']) %}

          -Subs: {{ 'stream' if d_sub == 'copy' else d_sub }}{% endif %}

          {% endif %}

          {% endif %}"
        title: "{% set verbs = {'play':'started','pause':'paused','stop':'stopped','resume':'resumed','change':'changed transcoded'} %} *#Plex:* {{user}} {{ iif(event in verbs, verbs[event], event) }} {{ session.media_type if session != 0 else 'stream' }}"
        data:
          disable_notification: "{{ iif(event in ['stop'], 'true', 'false') }}"
          message_tag: plex
      enabled: true
    enabled: true
  trace:
    stored_traces: 20
  mode: parallel
  max: 10
- id: '1757565216838'
  alias: Plex Webhook
  description: ''
  triggers:
  - trigger: webhook
    allowed_methods:
    - POST
    - PUT
    local_only: true
    webhook_id: plex-stream-activity
  conditions: []
  actions:
  - variables:
      payload: "{{ trigger.data['payload'].decode('utf-8') | from_json }}"
      event: "{{ payload.event }}"
      domain: "{{ event.split('.')[0] }}"
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ domain in ['media', 'playback'] }}"
        alias: Media/Playback Event
        enabled: false
      - alias: Media/Playback Event
        condition: template
        value_template: "{{ event in ['media.stop'] }}"
      sequence:
      - action: homeassistant.update_entity
        metadata: {}
        data:
          entity_id:
          - sensor.tautulli_stream_data
  mode: parallel
  max: 10
- id: '1757946566863'
  alias: Ombi Request
  description: ''
  triggers:
  - trigger: webhook
    allowed_methods:
    - POST
    - PUT
    local_only: true
    webhook_id: ombi-request
    alias: When Ombi sends a webhook
  conditions: []
  actions:
  - variables:
      payload: '{{ trigger.json }}'
      event: '{{ payload.notificationType }}'
    alias: Define variables
  - choose:
    - conditions:
      - alias: New Request
        condition: template
        value_template: "{{ event in ['NewRequest'] }}"
      sequence:
      - variables:
          requestId: "{{ payload.requestId }}"
      - data:
          title: '*#Ombi Request* by {{ payload.requestedUser }}'
          message: '{{ payload.type }}: {{ payload.title }} ({{ payload.year }})

            {{ payload.overview }}


            Request ID: {{ requestId }}'
          target: '{{ states("sensor.telegram_tom_s_chat_id") }}'
          inline_keyboard: Approve:/ombi approve {{ requestId }},Deny:/ombi deny {{
            requestId }}
        action: telegram_bot.send_message
        enabled: true
      alias: For new requests
  mode: parallel
  max: 10
  trace:
    stored_traces: 15
- id: '1758035617209'
  alias: Sonarr Activity
  description: ''
  triggers:
  - trigger: webhook
    allowed_methods:
    - POST
    - PUT
    local_only: true
    webhook_id: sonarr-activity
  conditions: []
  actions:
  - variables:
      payload: '{{ trigger.json }}'
      event: '{{ payload.eventType|lower }}'
  - choose:
    - conditions:
      - alias: Series Added
        condition: template
        value_template: '{{ event == "seriesadd" }}'
      - alias: Notifications for Additions Enabled
        condition: state
        entity_id: input_boolean.sonarr_notifications_additions
        state: 'on'
      sequence:
      - action: notify.telegram_tom
        metadata: {}
        data:
          title: '#Sonarr: Series Added'
          message: "{{ payload.series.title }} ({{ payload.series.year }}) {% if(
            payload.series.imdbId != null ) %}\n  https://www.imdb.com/title/{{ payload.series.imdbId
            }}\n{% endif %}"
        alias: Notify of new series added
      alias: Series Added
    - conditions:
      - alias: Grab
        condition: template
        value_template: '{{ event == "grab" }}'
      - condition: state
        entity_id: input_boolean.sonarr_notifications_grab
        state: 'on'
        alias: Sonarr Notifications of Grabs
      sequence:
      - alias: Notify of series and episodes grabbed
        action: notify.telegram_tom
        metadata: {}
        data:
          title: '#Sonarr: Grabbed {{ payload.episodes|count }} episodes'
          message: '**{{ payload.series.title }}** ({{ payload.series.year }})

            {% for ep in payload.episodes %}- S{{ "{:0>2}".format(ep.seasonNumber)
            }}E{{ "{:0>2}".format(ep.episodeNumber) }}

            {% endfor %}'
      alias: Content Grabbed
    enabled: true
  trace:
    stored_traces: 10
  mode: parallel
  max: 15
- id: '1758057704976'
  alias: Ombi Approval Workflow
  triggers:
  - trigger: webhook
    allowed_methods:
    - POST
    - PUT
    local_only: true
    webhook_id: ombi-request
    id: ombi-request
    alias: Ombi Request Webhook
  - entity_id: input_text.request_id
    trigger: state
    id: newrequest
  - alias: Approval Command Received
    event_type: telegram_command
    event_data:
      command: /ombiapprove
    enabled: true
    trigger: event
    id: approval
  - alias: Approval Command Received
    event_type: telegram_callback
    event_data:
      command: /ombi
    enabled: true
    trigger: event
    id: approval_cb
  actions:
  - alias: If ombi webhook
    if:
    - condition: trigger
      id:
      - ombi-request
    then:
    - variables:
        payload: '{{ trigger.json }}'
        event: '{{ payload.notificationType }}'
      alias: Define variables
    - choose:
      - conditions:
        - alias: New Request
          condition: template
          value_template: '{{ event in ["NewRequest"] }}'
        sequence:
        - variables:
            requestId: '{{ payload.requestId }}'
        - data:
            title: '*#Ombi Request* by {{ payload.requestedUser }}'
            message: '{{ payload.type }}: {{ payload.title }} ({{ payload.year }})

              {% if( payload.type == "TV Show" ) %}

              Season(s): {{ payload.seasonsList}}

              {% endif %}

              {{ payload.overview }}


              Request ID: {{ requestId }}'
            target: '{{ states("sensor.telegram_tom_s_chat_id") }}'
            inline_keyboard: Approve:/ombi approve {{ requestId }},Deny:/ombi deny
              {{ requestId }}
            config_entry_id: 01K5APRC5GPDBHW16NG5A2GKXA
          action: telegram_bot.send_message
          enabled: true
        alias: For new requests
  - choose:
    - conditions:
      - condition: trigger
        id:
        - approval_cb
      sequence:
      - variables:
          id: '{{ trigger.event.data.id }}'
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.chat_id }}'
          args: '{{ trigger.event.data.args }}'
          command: '{{ args[0] if args|length > 0 else "" }}'
          val: '{{ args[1] if args|length > 1 else "" }}'
          requestId: '{{ val if command in ["approve","deny"] else "" }}'
      - alias: Request Decision Received
        choose:
        - conditions:
          - alias: Command is 'approve' or 'deny'
            condition: template
            value_template: '{{ command in ["approve","deny"] }}'
          sequence:
          - if:
            - condition: template
              value_template: '{{ command == "approve" }}'
              alias: If request is approved
            then:
            - action: rest_command.ombi_approve_tv
              data:
                payload_data:
                  id: '{{ requestId }}'
            else:
            - action: rest_command.ombi_deny_tv
              data:
                payload_data:
                  id: '{{ requestId }}'
            alias: Send applicable Ombi API command
          - action: telegram_bot.answer_callback_query
            metadata: {}
            data:
              show_alert: false
              config_entry_id: 01K5APRC5GPDBHW16NG5A2GKXA
              message: Request {{ requestId }} has been {{ iif(command == 'approve',
                'approved', 'denied') }}
              callback_query_id: '{{ trigger.event.data.id }}'
          - action: telegram_bot.edit_message
            metadata: {}
            data:
              config_entry_id: 01K5APRC5GPDBHW16NG5A2GKXA
              message_id: '{{ message_id }}'
              chat_id: '{{ chat_id }}'
              title: '*#Ombi request processed*'
              message: Request {{ requestId }} has been {{ iif(command == 'approve',
                'approved', 'denied') }}
          alias: Response to new request
      alias: Callback Received
    enabled: true
  mode: parallel
  max: 10
