####################
#
# TRIGGERED SENSORS
#
####################

#- trigger:
#  - platform: state
#    entity_id: button.doorbell
#  binary_sensor:
#    name: doorbell_delay
#    state: "{{ trigger.platform == 'state' }}"
#    auto_off:
#      seconds: 10

- trigger:
    - platform: time_pattern
      hours: "/1"
  sensor:
      - name: Next Trash Pickup
        availability: "{{ not is_state('sensor.waste_pickup_data', 'unavailable') }}"
        unique_id: waste_trash
        state: >
            {% set waste =  state_attr('sensor.waste_pickup_data','trash') %}
            {% set pickup = namespace(dt=-1) %}
            {%- for d in range(0, waste|length) if pickup.dt < 0 -%}
             {% if(((waste[d]|as_datetime|as_local).date() - now().date()).days >= 0 ) %}
             {% set pickup.dt = d %}
             {% endif %}
            {% endfor %}
            {{ waste[pickup.dt] }}
        icon: mdi:delete
        attributes:
          proximity: >
            {{ ((this.state|as_datetime|as_local).date() - now().date()).days }}
          format: >
            {% set prox = this.attributes.proximity|int %}
            {% if( prox == 0 ) %}
              Today
            {% elif( prox == 1 ) %}
              Tomorrow
            {% else %}
              {{this.state|as_timestamp|timestamp_custom('%A, %B %-d')}}
            {% endif %}
      - name: Next Recycling Pickup
        availability: "{{ not is_state('sensor.waste_pickup_data', 'unavailable') }}"
        unique_id: waste_recycling
        state: >
            {% set waste =  state_attr('sensor.waste_pickup_data','recycling') %}
            {% set pickup = namespace(dt=-1) %}
            {%- for d in range(0, waste|length) if pickup.dt < 0 -%}
             {% if(((waste[d]|as_datetime|as_local).date() - now().date()).days >= 0 ) %}
             {% set pickup.dt = d %}
             {% endif %}
            {% endfor %}
            {{ waste[pickup.dt] }}
        icon: mdi:recycling
        attributes:
          proximity: >
            {{ ((this.state|as_datetime|as_local).date() - now().date()).days }}
          format: >
            {% set prox = this.attributes.proximity|int %}
            {% if( prox == 0 ) %}
              Today
            {% elif( prox == 1 ) %}
              Tomorrow
            {% else %}
              {{this.state|as_timestamp|timestamp_custom('%A, %B %-d')}}
            {% endif %}

- trigger:
    - platform: time_pattern
      minutes: "/30"
  sensor:
    - name: "Month Gone"
      unique_id: month_gone
      state: >-
        {% set today = now() %}
        {% set dt = today %}
        {% set days = (dt.replace(month=dt.month % 12 + 1, day=1) - timedelta(days=1)).day %}
        {% set progress = (today.day - 1) + today.hour / 24 %}
        {{ ((progress / days) * 100)|round(1) }}
      unit_of_measurement: "%"
      icon: "mdi:percent"

- trigger:
    - platform: state
      entity_id: weather.ecobee3
  action:
    - service: weather.get_forecasts
      data:
        type: daily
      target:
        entity_id: weather.ecobee3
      response_variable: stuff
  sensor:
    - name: Todays High
      unique_id: todays_temp_high
      state: "{{ stuff['weather.ecobee3'].forecast[0].temperature }}"
      unit_of_measurement: "°F"
    - name: Todays Low
      unique_id: todays_temp_low
      state: "{{ stuff['weather.ecobee3'].forecast[0].templow }}"
      unit_of_measurement: "°F"



####################
#
#   STANDARD SENSORS
#
####################

- sensor:

  - name: Trash Pickup
    availability: "{{ not is_state('sensor.trash_pickup_data', 'unavailable') }}"
    unique_id: trash_pickup
    state: >
      {% if state_attr('sensor.trash_pickup_data','recycling')|bool == true %}
        Trash & Recycling
      {% else %}
        Trash Pickup
      {% endif %}
    attributes:
      date: >
        {% set pickup = state_attr('sensor.trash_pickup_data','date') %}
        {% set today = now().date() %}
        {% if( today|string == pickup|string ) %}
          Today
        {% elif( (today + timedelta(days=1))|string == pickup|string ) %}
          Tomorrow
        {% else %}
          {{pickup|as_timestamp|timestamp_custom('%A, %B %-d')}}
        {% endif %}
      proximity: >
        {% set pickup = state_attr('sensor.trash_pickup_data','date') %}
        {{ ((pickup|as_datetime|as_local).date() - now().date()).days }}
    icon: >
        {% if state_attr('sensor.trash_pickup_data','recycling')|bool == true %}
          mdi:recycle
        {% else %}
          mdi:delete
        {% endif %}


  #=== ENVIRONMENTAL SENSORS

  - name: Air Quality
    unique_id: airquality
    availability: "{{ not is_state('sensor.openweather_aqi', 'unavailable') }}"
    state: >
      {% if is_state("sensor.openweather_aqi", "unavailable") %}
        Unknown
      {% else %}
        {% set aqi = states("sensor.openweather_aqi")|int %}
        {% if aqi > 300 %} Hazardous
        {% elif aqi > 200 %} Very Unhealthy
        {% elif aqi > 100 %} Unhealthy
        {% elif aqi > 50 %} Moderate
        {% else %} Good
        {% endif %}
      {% endif %}
    attributes:
      ts: >
        {{ state_attr('sensor.airvisual_data','dt') }}
      color: >
        {% set quality = this.state|lower %}
        {%
            set colors = {
              'good': 'green',
              'moderate': '#EAB700',
              'unhealthy': 'orange',
              'very unhealthy': 'purple',
              'hazardous': 'maroon'
            }
        %}
        {{ colors[quality] }}
    icon: >
      {% set aqi = this.state|lower %}
      {% if aqi == "good" %} mdi:emoticon
      {% elif aqi == "moderate" %} mdi:emoticon-neutral-outline
      {% elif aqi == "unhealthy" %} mdi:emoticon-frown-outline
      {% elif aqi == "very unhealthy" %} mdi:alert
      {% elif aqi == "hazardous" %} mdi:skull
      {% else %} mdi:help-circle-outline
      {% endif %}



  #=== PLEX/TAUTULLI


  - name: Plex Libraries
    unique_id: plex_libraries
    icon: "mdi:filmstrip-box-multiple"
    availability: "{{ is_state('sensor.tautulli_libraries', 'success') }}"
    state: true
    attributes:
      movies: >
        {% set lib_id = states("input_number.plex_movie_library_id") | int | string %}
        {{ state_attr('sensor.tautulli_libraries', 'response')['data'] | selectattr('section_id', 'eq', lib_id ) | list | map(attribute='count') | list | first | int }}
      movies4k: >
        {% set lib_id = states("input_number.plex_movie_4k_library_id") | int | string %}
        {{ state_attr('sensor.tautulli_libraries', 'response')['data'] | selectattr('section_id', 'eq', lib_id ) | list | map(attribute='count') | list | first | int }}
      tv: >
        {% set lib_id = states("input_number.plex_tv_library_id") | int | string %}
        {{ state_attr('sensor.tautulli_libraries', 'response')['data'] | selectattr('section_id', 'eq', lib_id ) | list | map(attribute='count') | list | first | int }}


####################
#
# BINARY SENSORS
#
####################

- binary_sensor:

  - name: "Charybdis CPU Busy"
    unique_id: charybdis_cpu_busy
    state: >
      {% if(states('sensor.charybdis_cpu_load')|is_number) %}
        {{states("sensor.charybdis_cpu_load")|float >= 50 }}
      {% else %}
        false
      {% endif %}
    delay_on: "00:05:00"
    delay_off: "00:05:00"
    device_class: running

  - name: "Monthly Data Concern"
    unique_id: monthly_data_concern
    device_class: problem
    state: >
      {% set data = state_attr('sensor.data_usage_gb','pct_of_cap')|float %}
      {% set days = states('sensor.month_gone')|float %}
      {{ data >= (days*0.8) }}

  - name: Plex Streaming
    unique_id: plex_streaming
    device_class: running
    icon: "mdi:plex"
    state: >
      {% set plex = state_attr('sensor.plex_stream_data','MediaContainer')['Metadata'] %}
      {% if(plex | count > 0) %}
        {{ plex|selectattr('type','in','["episode","movie"]') | list | count > 0 }}
      {% else %}
        false
      {% endif %}
    attributes:
      local: >
        {% set plex = state_attr('sensor.plex_stream_data','MediaContainer')['Metadata'] %}
        {% if(plex | count > 0) %}
          {{ plex|selectattr('type','in','["episode","movie"]')|selectattr('Player.local','eq',true) | list | count }}
        {% else %}
          0
        {% endif %}
      remote: >
        {% set plex = state_attr('sensor.plex_stream_data','MediaContainer')['Metadata'] %}
        {% if(plex | count > 0) %}
          {{ plex|selectattr('type','in','["episode","movie"]')|selectattr('Player.local','eq',false) | list | count }}
        {% else %}
          0
        {% endif %}

#  - name: Tautulli Streaming
#    unique_id: tautulli_streaming
#    device_class: running
#    state: >
#        {{ state_attr('sensor.tautulli_stream_data', 'sessions') 
#          | selectattr('media_type', 'in', ['movie','episode'] ) | list | count > 0 }}
#    attributes:
#      local: >
#        {{ state_attr('sensor.tautulli_stream_data', 'sessions') 
#          | selectattr('media_type', 'in', ['movie','episode'] ) 
#          | selectattr('local', 'eq', 1 ) | list 
#          | map(attribute='session_key') | list | count }}
#      remote: >
#        {{ state_attr('sensor.tautulli_stream_data', 'sessions') 
#          | selectattr('media_type', 'in', ['movie','episode'] ) 
#          | selectattr('local', 'eq', 0 ) | list 
#          | map(attribute='session_key') | list | count }}
